// protobuffer version: 3.7.1
// grpc version: 1.19.1

syntax = "proto3";

import "aecs.proto";

package kubetee;

option java_package = "com.alipay.kubetee.aecs.proto.v1";

service Aecs {
// -----------------------------------------------------------
// AECS common untrusted interfaces
// -----------------------------------------------------------

  // Get the encalve status and information together with ra report
  rpc GetAecsStatus(GetAecsStatusRequest)
    returns (GetAecsStatusResponse) {
  }

  // Get the encalve status and information together with ra report
  rpc SyncWithRemoteAecs(SyncWithRemoteAecsRequest)
    returns (SyncWithRemoteAecsResponse) {
  }

// -----------------------------------------------------------
// AECS identity interfaces
// -----------------------------------------------------------

  // For sync RSA identity key pair and aes key between two AECS nodes
  rpc GetRemoteSecret(GetRemoteSecretRequest)
    returns (GetRemoteSecretResponse) {
  }

// -----------------------------------------------------------
// AECS administrator interfaces
// -----------------------------------------------------------

  // For wrapper channel to call remote trusted function from
  // AECS admin client to AECS server
  rpc AecsAdminRemoteCall(AdminRemoteCallRequest)
    returns (AdminRemoteCallResponse) {
  }

// -----------------------------------------------------------
// Service administrator interfaces
// -----------------------------------------------------------

  // For wrapper channel to call remote trusted function from
  // AECS admin client to AECS server
  rpc ServiceAdminRemoteCall(AdminRemoteCallRequest)
    returns (AdminRemoteCallResponse) {
  }

// -----------------------------------------------------------
// Business service interfaces
// -----------------------------------------------------------

  // Create and destroy the trusted application bound secret
  // Get the secret created by TA or service administrator
  rpc TaRemoteCall(TaRemoteCallRequest)
    returns (TaRemoteCallResponse) {
  }

  // Get the enclave secret's public key
  // Of course, only for RSA key pair or certificate type
  rpc GetEnclaveSecretPublic(GetEnclaveSecretPublicRequest)
    returns (GetEnclaveSecretPublicResponse) {
  }
}
