cmake_minimum_required(VERSION 3.5)
project(AECS)

set(TFF_REPO tff)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/${TFF_REPO}/cmake)
find_package(SGX REQUIRED)

set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/out)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/out)
set(TEE_TOP_DIR ${CMAKE_SOURCE_DIR}/${TFF_REPO})
set(AECS_TOP_DIR ${CMAKE_SOURCE_DIR})

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread")
if(SGX_HW STREQUAL "OFF")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSGX_SIM_MODE=true")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSGX_SIM_MODE=false")
endif()
if(SGX_MODE STREQUAL "Debug")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g2 -DDEBUG -UNDEBUG -UEDEBUG")
endif()
if(BUILD_TESTS STREQUAL "ON")
#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g2 -fprofile-arcs -ftest-coverage")
endif()
if(WITHOUT_LOG STREQUAL "ON")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNOLOG")
endif()
if(WITH_FEATURE_LA STREQUAL "ON")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_FEATURE_LA")
endif()

add_subdirectory(${TFF_REPO}/third_party/protobuf-cpp/src/google/protobuf)
add_subdirectory(${TFF_REPO}/sdk)
add_subdirectory(server)
add_subdirectory(server/storage_backend_fs)

add_subdirectory(third_party/gflags)
add_subdirectory(third_party/yaml-cpp)
add_subdirectory(client)
